/*
 * Sample API
 * API description in Markdown.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineObject4;
import org.openapitools.client.model.InlineObject5;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient localVarApiClient;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for authIdPatch
     * @param id id del usuario el cual se pretende activar (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> a </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authIdPatchCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authIdPatchValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = authIdPatchCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * activa cuenta de usuario ya registrado
     * @param id id del usuario el cual se pretende activar (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> a </td><td>  -  </td></tr>
     </table>
     */
    public void authIdPatch(String id) throws ApiException {
        authIdPatchWithHttpInfo(id);
    }

    /**
     * 
     * activa cuenta de usuario ya registrado
     * @param id id del usuario el cual se pretende activar (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> a </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authIdPatchWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = authIdPatchValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * activa cuenta de usuario ya registrado
     * @param id id del usuario el cual se pretende activar (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> a </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authIdPatchAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authIdPatchValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authPatch
     * @param payload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> si el usuario es autenticado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> en caso de no ser autenticado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authPatchCall(InlineObject5 payload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authPatchValidateBeforeCall(InlineObject5 payload, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = authPatchCall(payload, _callback);
        return localVarCall;

    }

    /**
     * 
     * autentica usuario ya registrado
     * @param payload  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> si el usuario es autenticado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> en caso de no ser autenticado </td><td>  -  </td></tr>
     </table>
     */
    public void authPatch(InlineObject5 payload) throws ApiException {
        authPatchWithHttpInfo(payload);
    }

    /**
     * 
     * autentica usuario ya registrado
     * @param payload  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> si el usuario es autenticado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> en caso de no ser autenticado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authPatchWithHttpInfo(InlineObject5 payload) throws ApiException {
        okhttp3.Call localVarCall = authPatchValidateBeforeCall(payload, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * autentica usuario ya registrado
     * @param payload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> si el usuario es autenticado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> en caso de no ser autenticado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authPatchAsync(InlineObject5 payload, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authPatchValidateBeforeCall(payload, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authPut
     * @param credentials  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> a </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authPutCall(InlineObject4 credentials, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = credentials;

        // create path and map variables
        String localVarPath = "/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authPutValidateBeforeCall(InlineObject4 credentials, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = authPutCall(credentials, _callback);
        return localVarCall;

    }

    /**
     * 
     * autentica usuario ya registrado
     * @param credentials  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> a </td><td>  -  </td></tr>
     </table>
     */
    public void authPut(InlineObject4 credentials) throws ApiException {
        authPutWithHttpInfo(credentials);
    }

    /**
     * 
     * autentica usuario ya registrado
     * @param credentials  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> a </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authPutWithHttpInfo(InlineObject4 credentials) throws ApiException {
        okhttp3.Call localVarCall = authPutValidateBeforeCall(credentials, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * autentica usuario ya registrado
     * @param credentials  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> a </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authPutAsync(InlineObject4 credentials, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authPutValidateBeforeCall(credentials, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
