/*
 * Sample API
 * API description in Markdown.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HousingApi {
    private ApiClient localVarApiClient;

    public HousingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HousingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for housingGet
     * @param limit limite de los recursos obtenidos (optional)
     * @param page p치gina actual (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no existe el documento en base de datos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housingGetCall(BigDecimal limit, String page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/housing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call housingGetValidateBeforeCall(BigDecimal limit, String page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = housingGetCall(limit, page, _callback);
        return localVarCall;

    }

    /**
     * 
     * obtiene el un conjunto de recursos paginados
     * @param limit limite de los recursos obtenidos (optional)
     * @param page p치gina actual (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no existe el documento en base de datos </td><td>  -  </td></tr>
     </table>
     */
    public void housingGet(BigDecimal limit, String page) throws ApiException {
        housingGetWithHttpInfo(limit, page);
    }

    /**
     * 
     * obtiene el un conjunto de recursos paginados
     * @param limit limite de los recursos obtenidos (optional)
     * @param page p치gina actual (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no existe el documento en base de datos </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> housingGetWithHttpInfo(BigDecimal limit, String page) throws ApiException {
        okhttp3.Call localVarCall = housingGetValidateBeforeCall(limit, page, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * obtiene el un conjunto de recursos paginados
     * @param limit limite de los recursos obtenidos (optional)
     * @param page p치gina actual (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no existe el documento en base de datos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housingGetAsync(BigDecimal limit, String page, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = housingGetValidateBeforeCall(limit, page, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for housingPost
     * @param housing  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> recurso creado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> faltan atributos requeridos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housingPostCall(Object housing, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = housing;

        // create path and map variables
        String localVarPath = "/housing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call housingPostValidateBeforeCall(Object housing, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'housing' is set
        if (housing == null) {
            throw new ApiException("Missing the required parameter 'housing' when calling housingPost(Async)");
        }
        

        okhttp3.Call localVarCall = housingPostCall(housing, _callback);
        return localVarCall;

    }

    /**
     * 
     * crea una nueva vivienda
     * @param housing  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> recurso creado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> faltan atributos requeridos </td><td>  -  </td></tr>
     </table>
     */
    public void housingPost(Object housing) throws ApiException {
        housingPostWithHttpInfo(housing);
    }

    /**
     * 
     * crea una nueva vivienda
     * @param housing  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> recurso creado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> faltan atributos requeridos </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> housingPostWithHttpInfo(Object housing) throws ApiException {
        okhttp3.Call localVarCall = housingPostValidateBeforeCall(housing, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * crea una nueva vivienda
     * @param housing  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> recurso creado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> faltan atributos requeridos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housingPostAsync(Object housing, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = housingPostValidateBeforeCall(housing, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
